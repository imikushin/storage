#!/bin/bash
set -x

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

error_file=$(mktemp)
cleanup() {
    rm -rf ${error_file}
}
trap cleanup EXIT

init()
{
    print_success
}

create()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi
    if ! OUT=$($(dirname $0)/longhorn-driver vol create '{"name":"'"${OPTS[name]}"'","opts":'"${1}"'}' 2>${error_file}); then
        print_error "$(<error_file)"
    fi
    print_options created true name ${OPTS[name]}
}

delete()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi
    if ! OUT=$($(dirname $0)/longhorn-driver vol delete "${OPTS[name]}" 2>${error_file}); then
        print_error "$(<error_file)"
    fi
    print_success
}

attach()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi
    if ! OUT=$($(dirname $0)/longhorn-driver vol attach "${OPTS[name]}" 2>${error_file}); then
        print_error "$(<error_file)"
    fi

    print_device ${OUT}
}

detach()
{
    # ${DEVICE} will be set with the device that should be detached
    if ! OUT=$($(dirname $0)/longhorn-driver vol detach "${DEVICE}" 2>${error_file}); then
        print_error "$(<error_file)"
    fi
    print_success
}

mountdest()
{
    # ${MNT_DEST} will be set with the directory where the filesystem should be mounted
    # ${DEVICE} will be the device returned from attach, if any
    # ${OPTS} will be populated with the options from the JSON input
    if ! OUT=$($(dirname $0)/longhorn-driver vol mountdest '{"opts":'"${1}"'}' "${MNT_DEST}" "${DEVICE}" 2>${error_file}); then
        print_error "$(<error_file)"
    fi

    print_success
}

unmount()
{
    # ${MNT_DEST} will be set with the directory from which the filesystem should be unmounted
    if ! OUT=$($(dirname $0)/longhorn-driver vol unmount "${MNT_DEST}" 2>${error_file}); then
        print_error "$(<error_file)"
    fi

    print_success
}

# Every script must call main as such
main "$@"
