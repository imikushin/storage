#!/bin/bash
set -x

if [ -e "$(dirname $0)/common.sh" ]; then
    source $(dirname $0)/common.sh
elif [ -e "$(dirname $0)/../common/common.sh" ]; then
    source $(dirname $0)/../common/common.sh
fi

init()
{
    print_success
}

create()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi
    if ! ERROR=$(./longhorn-driver vol create '{"name":"'"${OPTS[name]}"'","opts":'"${1}"'}' 2>&1); then
        print_error "${ERROR}"
    fi
    print_options created true name ${OPTS[name]}
}

delete()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi
    if ! ERROR=$(./longhorn-driver vol delete '{"name":"'"${OPTS[name]}"'","opts":'"${1}"'}' 2>&1); then
        print_error "${ERROR}"
    fi
    print_success
}

attach()
{
    # The OPTS variable will be populated from the input JSON as a map of key/values
    if [ -z "${OPTS[name]}" ]; then
        print_error "name is required"
    fi

    # FIXME the following is from example
    IMG=${OPTS[volumeID]}.img
    if [ ! -e "${IMG}" ]; then
        print_error "Failed to find ${IMG}"
    fi

    DEVICE=$(losetup --show -f ${IMG})

    print_device $DEVICE
}

detach()
{
    # ${DEVICE} will be set with the device that should be detached
    losetup -d ${DEVICE}
    print_success
}

mountdest()
{
    # ${MNT_DEST} will be set with the directory where the filesystem should be mounted
    # ${DEVICE} will be the device returned from attach, if any
    # ${OPTS} will be populated with the options from the JSON input
    print_not_supported
}

unmount()
{
    # ${MNT_DEST} will be set with the directory from which the filesystem should be unmounted
    print_not_supported
}

# Every script must call main as such
main "$@"
